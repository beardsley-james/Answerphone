Answerphone the Game

You start out with one computer, a single account (doctor’s office, lawyer, hvac) and you answer the calls yourself. It start out with you making dialogue choices to get through the call, and dialogue choices should eventually lead to some sort of storyline coming out, but as you get more money you can hire someone so that you can take calls late at night instead of working yourself the whole time, get new computers, hire sales people or go out yourself to get new accounts, increasing volume etc. You have to manage your employees - you advertise for certain shifts but who knows who you’ll get, you’ll get first impressions of possible employees before you hire them but you won’t get detailed stats on them until they’ve been working for you long enough for you to get to know them. Maybe a supervisor skill would be to speed up how fast you can get detailed breakdowns of employee stats. Some of them will be better at certain calls than others but calls get routed randomly. They should have like personability, speed, accuracy, that sort of thing as ratings. I’d like to have some kind of random generator pixel art thing throwing up portraits.

I guess the end game is when you build a good enough staff that they can just kind of do everything on their own without you doing a lot to input into the system so it’s an engine building game but it’s a squishy engine that you have to work with instead of a mechanical one with smooth moving parts. I’m thinking people call out/get sick/go crazy/go apeshit on customers, if calls aren’t handled well or you’re understaffed you’ll have to deal with complaints from customers who should have some hidden stats keeping track of how happy they are. Maybe put Tammy’s job in there too, running around trying to actually get the money out of your client so conscientiousness should be a hidden stat too. I guess there’s the acquisition and analysis stages with adding new entities, so a human resources person would get new staff and give you a basic overview of them but a supervisor or training manager would have to work with them to actually get the nitty gritty on their capabilities, and a sales person will give you wildly optimistic analyses of the new clients he’s getting for you but until customer service and billing is working with them you won’t really know for sure what you’re working with. The admin positions should be fillable from either the general pool or you can advertise for those positions specifically - it’d be cheaper to fill with operators but they might not be as good as people who are specifically applying for the jobs, so it’s a gamble. Firing should be easy but not without consequence - maybe a background stat that keeps track of your company’s reputation in the city so that it gets harder to get good people if you’re firing people indiscriminately. If you complete a business in a city you can prestige by moving to another city with a different makeup of business to grab as clients and different kinds of employees, that’s a fun twist on prestige. I don’t know if you should keep getting passive income from your old branches or if you should sell them for start up capital for the new one.

Upgrading hardware has to be part of it.

Competition should probably be part of it too - maybe not fully simulated, certainly not as detailed as yours since it’s not like multiplayer or anything but sort of a sales staff with a general competency level in the background. You could give guidance to your sales staff too and decide how much you want to drop your rates to compete with the other answering services in town. If you’re competing too hard you might not make enough money from the accounts for it to be worth it. You could maybe do a strategy where you offer cut rate prices to your competitors’ clients and then kick them off so you take their business and then leave them with nothing so there should be a background stat keeping track of your reputation with possible clients as well as employees. I think the fun twist here is that it has to be about managing yourself both as a service provider and as an employer. A lot of management games just treat employees like pawns that just sort of do what they’re supposed to and have little agency besides that so really getting into managing employees would be the good part here.

A big part of it would have to be the call-routing architecture, each of the business would be getting certain ranges of calls during certain periods of time.


8/9/19

So the central mechanic here is going to be the generation of the call queue and the interactions between the operator entities and the call queue itself. So what is in the call? It is an object. It has a property that contains the information of the business that generated the call - what kinds of calls they get, how nice they are to their customers, priority level, urgency, these are things that would be determined by the initial contract with the company. At the beginning of the game you'd want to have easy calls that auto-transmit and operators can throw them on hold and pick them up from the queue. So like Answerphone you're going to want a live call queue and a holding call queue. One of the properties of operators should be how likely they are to pick up calls from which queue but that's besides the point right now. The call should have information on the caller/situation. I don't think you need to generate callers besides random name generation and maybe some simple descriptions of what problems they're having - so you'll want a database for the name generation and a database that has simple descriptions of the problems that people are having. So like "No heat" or "Fell down the stairs and hurt their head" and maybe make it so that pronouns or whatever can change depending on the relationship between the caller and the subject or patient. It would have an urgency level? Maybe a 1-10 number and each account has an assigned urgency level before the call goes to dispatch with an urgency setting of 0 for autotransmission? Different than priority, since priority is determined by the account, but this should wait for the dispatch mechanic to come up. I think to start I'm going to want to stick to some simple calls. So the initial engine program is going to be a few operators on stations answering calls for an HVAC company. The call is going to be the primary data collector and currency so it's going to have to keep track of how long it took to get put on hold, how long it took before the call was answered, how long the call itself took, let's assume auto transmission for the initial engine build but later it's going to want to keep track of how long it took to get dispatched, which operator put it on hold, which operator picked it up off of hold, and how satisfied the caller ended up at the end. Actually, satisfied/unsatisfied. At the end of the day there's going to be some kind of roll to see if any of the unsatsified callers complained to someone at the company that would do something about it.

So I need a database of male/female names and some road names I guess. Use real ZIP codes I think. All the calls to start with are going to be spawned by a small HVAC company that auto-transmits messages and can be put on hold. I need to be able to have a script that can change frequency at different times and generates calls more frequently during the afternoon lunch rush and evening. I need to then take those calls and put them into a live call queue. Then I need free operators to take the calls in the live queue and put them on hold until there aren't any left. Once the live queue is empty I need them to take calls out of the holding queue and handle the call. Once they finish handling the call I need the call objects to get properties for completed calls and moved into a completed calls section. At the end of the day, I need the completed calls to be analyzed and presented as usable data to the user. I just need some boxes with initials that show information about the call for each of the operators. I also want a visible queue on the side of the screen showing what calls there are and how long they've been waiting. I think getting that together is the opening stage to adding more features to the game.

8/10/19

I put together a few notes over the last couple days working on this. First I was thinking about how to split up the time - originally my thought was 1000 ticks with 250 for four different sections of the day but now I'm leaning towards 1440, one tick for each minute of the day, which should make calculating certain things pretty easy. 0-359 for overnight, 360-719 for morning, 720-1079 for afternoon, and 1080-1339 for night time.

Using these numbers I figure 720-780 will be lunch break, 1080-1200 is checkout, and 420-510 is a checkin period every morning. I think the player should be able to increase the speed of time. At 1 tick a second you're looking at a 24 minute game day which is probably too slow unless you're micromanaging, but you get 12 minutes at 2 ticks/second and it scaled from there to I think the maximum speed which would be 1.5 minutes if it's hitting 16 ticks a second - 4 second hours, which is probably where you're going to want to be when you get an engine up and running.

I thought about what kind of object I'm going to put together to model the clients, which are going to feed into the loop to make calls. They should have a name and a "type" to determine what kind of calls they get and a dispatch type, too, either "ersOnly" or something like that for accounts that just get emergencies paged, or I might use numbers but it's probably better to use strings to make the code easily parseable if not particularly data-light. I was thinking about call frequency as a stat too and had some thoughts about how to handle it. My original thought was a fucking disgusting 1440 item array where each minute gave the client their likelihood of getting a call in that time from but that is gross and I don't think I want to do that - bad enough for one day, but since businesses have different volume depending on the day I'm going to have to have SEVEN different arrays for that which is just way too many. Instead I think I want to have each account have a "frequency" reference, 0-10, and then each day will have 1440 items that determine how frequently the calls are going to be coming in on that day. It may be possible to vary the frequency value of accounts for seasons too in that case, where HVAC companies would have a lower frequency value when the weather was hot or cold sort of thing. That seems pretty graceful. And then the system would check the accounts to see which ones were under the frequency value and then determine if the accounts spawns a call for that minute. One problem to address is how to make it so more of certain calls come in at certain times which an individual array would handle better but maybe it's ok to gamify it a little bit and say every account has about the same likelihood to generate calls as long as it's active. There could also be a separate value in the client profile that was like the percentage chance that account would generate calls when it hit the frequency profile, which could also be varied by in-game events. Important to keep a master record of accounts and temporary active records during the day, though, and then have certain values slip back into the permanent record and others be lost at day end.

I was also working on operator profile. I was thinking about the different stats operators should have but right now I'm thinking they might just have 2 - Focus & Personability. There would be pros & cons to having high values in either metric. What I have right now is basically this:
low focus                           high Focus
less time completing calls          accurate messages
puts more calls on hold             more likely to stay on calls when others are coming in
reduced accuracy
poor attendance

low personability                   high Personability
shorter calls                       long calls
more conflicts with coworkers       longer gaps between calls (talking to coworkers)
better paging accuracy              mercy paging
  (no mercy paging)

Pretty rough framework right now but I haven't thought of any variables yet that wouldn't be handled by this model. It might be good to keep the operator model pretty simple since the player might end up with a lot of them. Another thought was that applicants would generate with a background and a work history and those two things would add 0-5 points to either of the scales and determine their stats, but kind of behind the scenes since you wouldn't be able to see the direct stats of people applying right away until you had a high focus/high personability person assigned to human resources tasks. Maybe 0-4 and add 0-2 for randomness' sake to keep it from being totally predictable? I want randomness to play a big part in this game, I don't want it to be one of those perfect information games. The fog of war is real when you're running a business.

Last, I was thinking about what the minute-loop would look like. I'm just going to transcribe this one from notes.

Every tick, this runs.
  Spawn calls.
  If an operator is idle and not recovering, they will answer a live call. If there are no live calls they will answer a holding call.
    If they are on a call but they picked it up live and it's less than 1 tick old, they will put the call on hold and set recovery to 1, the call will have answeringOp property set to answeringOp.
  If they are on a call and do not put it on hold, increment call time by 1.
  Check operator skill (focus?) against difficulty of the call to see if the call is complete. If the call is complete, determine how long the op will take to finish the call and set a counter.
  If the operator is currently finishing a message decrement the finish time by 1.
  If the finish time = 0, move the message to completed messages with appropriate time stamps and operator values and set a recovery timer (based on personability?)
  If they're recovering, decrement recovery timer by 1
  All the hold times in the queue increment by 1
And then repeat.

Pretty rough but I think it's enough of a loop to get an array of calls processed by operators and moved into a finished message bucket which is really the first battle. There's a lot of places in there you can insert subroutines and special case instructions too so I think it's a good start. The first programming job is going to get a script to generate hvac calls though so that's what I'm going to work on next.


8/11/19

I got a little function going that makes a message ticket. Nothing too complicated yet, just a name and message and company and type but it generates the name randomly from a list of names and generates a random message from an appropriate subcategory for messages so that's good. I also started messing around trying to get the call frequency chart to generate properly but that didn't exactly work out. It turns out the properties of objects aren't ennumerable so you can't go through them with a simple loop so I have to look for a different solution. I really want the time: value pairing to carry over though so what I'm thinking is that the businessDay function can actually handle it by importing the object and then checking against the object each click to see if one of the keys matches the current timestamp and then it could change the value of call frequency to the appropriate number. Another option would be to make an Array of "time:value" strings and then use regex to split them up but that might be a little janky and i'm not sure it would make things better. So I guess I'd add a bit of code to the time runner to check against the keys in the call frequency chart and then if it's appropriate change the currentFrequency value before running the next loop. If I go for this I think it makes more sense to alter the callFrequency value of the client object instead of trying to change things in the big array. This feels more graceful and a lot less wasteful of memory, which I managed to overload by creating some sort of infinite loop while trying to generate the time value array.

I think for balance purposes it might be interesting to just have like three categories of business that you answer for and then you could set events that change the frequency of calls for that category of client like a blizzard/heat wave to turn up the heat on your hvac companies or a scary news story making everyone feel like they have to call their doctor. On the other hand a lot of different categories could make it feel more interesting. I think three is where to start though, in this case I'm going to say HVAC, doctors offices, and lawyers but I'm just saying that for no. No commitment.


8/14/19

The idea to change message frequency by checking against keys worked perfectly, then I tried to nest a setInterval function inside of the while loop but that ended up not working at all. I pulled the dayGen function out entirely and set up a core.js file where I could run the main loop and now it's ticking away like the dickens. So everything I do pretty much is going to be nested in there to some degree, at least actual gameplay elements, so I'll have to keep in mind that I want to make sure I'm pulling function code out of there to work on elsewhere, just to keep it tidy. I started pulling the name stuff out too and I'm going to have another file to store generators and databases, though I may move to a separate databases file in short order again to keep it tidier. It's nice to have a bunch of small files where you can ferret stuff out instead of having a giant file but I think giant files are considered better for loading directly to a webpage. At some point, if I decide to try to transfer this into node (do I remember anything about coding in node? I don't think I do. I was starting to work with it on the Mythotopia program but I discontinued that at some point), I will probably keep the smaller files since I remember node really liking that.

Right now I'm having a problem with the businessName generator function which seems to not want to recognize one of the internal variables. The core.js code that's supposed to insert the actual call card into the queue div isn't working either but maybe that's because I have the div above the script tag that's calling core.js so it isn't able to hook into the DOM properly? I seem to remember the renderer reading from top to bottom so that might be the case. Either way I have to figure out how to get that to work because that's kind of the whole thing.


8/15/19

I moved the div for the callqueue above the script tags and now it works fine, it was just in the wrong order before. I put in this random client generator function which is eventually going to be used to display a set of three different client to the user so they can pick which one they want to add to their answering service and that'll be good, I put in some database entries for lawyer & doctors office even though I have to flesh everything out to make sure there's plenty of random entries for messages and stuff. I started working on some of the math to figure out how often calls are going to come for each client but it isn't really using it yet, I was mostly just working on clientGenerator today. Next time I'll have to make it so it displays messages from random clients properly but that's not where I'm at today.

One of the problems is that I don't really have a plan for generating names besides slapping a last name before or after a string. I think I want to come up with something a little more intense, maybe using some text replacement and a field that decides if it's a random last name or first name or what that the placeholder text gets replaced with. I think it would be pretty easy to do with regular expressions so that should also be on my to do list. I should make a to do list. That is also on my to do list.

8/18/19

So my good idea now is to have the early game be a clicker. Calls come up in the queue, you have to put them on hold fast or they hang up, and once they're in the holding queue you gotta answer em fast or they go away too so there'll be a race and the more you miss the worse your day has gone. And then you can hire employees to jump on and start putting calls on hold for you or whatever you want and kind of ramp up from there. I think it'll be a good gameplay loop, I guess it's just a clicker game by any other name but at least the clicking actually does something instead of just being clicking for clicking's sake. Unfortunately I don't think the structure I've got running right now is going to do the trick because it sets up a constant tick that can't be adjusted or halted easily by the script. I guess you can use something calls setTimer to something similar though for a specific number of ticks and you can adjust it too so I think the best thing to do is going to be use a setTimer set for 1440 loops to go through a day. Now I'm worried that 1440 is too many though because that is hella clicks if you're getting one call every second which you probably shouldn't be. And then it can give you the client selection menu every morning at 8am when you get in to do your admin stuff and let you hire people or whatever. Hiring people and stuff should be something you do instead of answer calls probably. The game should start by picking one of four different randomly generated clients to start with probably. And naming yourself. Savefile structure is going to be important too.


8/19/19

Starting to implement the queue object and the operator objects and I have them interacting but it's being a little weird right now and I'll have to go over it in more depth but I think I'm done for the night. It looks like everyone is just throwing their calls on hold right away when a new call is coming in which shouldn't be happening, it's supposed to be incrementing through each of the operators in turn and instead it's like doing them all at the same time. Gonna have to get into this. I don't think anyone's finishing any calls right now though, or picking up calls off of hold, so I'm not psyched about that. This is worse than supervising real operators!


8/22/19

In my continued quest to avoid actually dealing with the problems my operators are having answering and finishing the damn calls I spend some time today working with the rendering engine and getting that working. I went over a couple of ideas about how to handle the callQueue display/engine issue, I don't really want to use the html elements for the calls as the actual record for what calls are coming in though that's certainly an option. Instead I decided I'd use an ID method to tag each call with a unique number that could be used to pull something out of the object model, or vice versa of course, though at these point since ops are just pulling the calls out of the queue from the top down (are they?) I don't really have to worry about picking anything in particular there. At some point, though, I want op behavior to be a little more organic and variable and then I'll need to be able to target a particular call object in the javascript model. Also the clicker aspect means I'll have to be able to pull a specific call from the queue to switch categories which is the main reason I like it better. So that's good. I've got them scrolling into the queue in the DOM with some colors because of the CSS file I made at work yesterday. I still need to grapple with operator behavior though I think test.html is going to have to do this work. Probably want an account that will produce one call every two ticks or so and an op that has a nice high level so that they can finish the call really well. I think the call finishing function is also acting up. I'm a little too tired and feeling kind of mad to solve this problem right now though so I'm going to let it go.

8/23/19

I got the queue to work! The problem was that I was using an op property (.onCall) instead of just using (op.call.length > 0) which just checks whether or not there's a call object in the array. So now I have my ops pulling calls off of queue, sticking with them if they've been on hold already, working the holding calls, and then finishing the calls and moving them into the completed folder. I also have a lost calls category now for calls ringing out when people get bored, though I should set that to a variable since that's one of the things that could be used to make an area more challenging than other another city where people are perhaps more patient. It looks pretty good and it works fine. I need to set up the rendering of the op object so I can show when they're on a call or whatever and I need to implement an "onclick" function for the calls in the DOM so that I can start getting the clicker functionality going. I also need an end of day routine and I need to switch from setInterval to setTimer with a callback function.

8/24/19

OpCard are displayed and it shows their current activity in a barebones way but they're still throwing calls on hold too easily and not sticking with calls they take out of the holding queue so that's something to figure out. Display looks nice though and I also implemented a randomized initial generator that uses recursion to make sure it's unique.

8/26/19

Another little thing. I made a function to refresh the stat line on the calls. I don't think the stat line is nearly finalized at this point but it's what I'm working with for now. I think I need to buckle down and really hash out the setTimeout function this weekend; once that's done I can start building infrastructure over the basic gameplay I think. I also still have to make the onClick function which is going to be critical to making it more than a weird toy.

8/28/19

Got the click handler set up pretty good right now. You can click a live call to put it into the holding queue or click a holding call to complete it. When you click the stat line it kind of fucks everything up because the statline parent element is the call box instead of the category box so it doesn't help much, and you have to click the constantly moving bottom of the queue to answer the oldest calls so what I want to do is reverse the order so the oldest calls are on top and new calls get added to the bottom (not in the game logic, though, just in the view). I think this should work fine even if it stays youngest-oldest in the holdQueue object but maybe I should reverse the order in there too.

It all looks real jumpy though and maybe there's something I could do to make it seem smoother. Just a little fade out maybe for the calls instead of having them disappear instantly, like a .5 or .75 move or something. But that might fuck around with the actual timer for the game so I have to be careful with it.

It was throwing me some error messages because I figured out how to get it to work in the view before I got it to work in the model. No good. Fixed it up a bit and ended up using splice anyway even though I think my initial solution was fine, the problem was I was looking for call.callId instead of call.callNumber, only one of which actually exists.

8/29/19

Good progress getting a working end of day report to render properly, it's adding up some stuff and throwing it into fields on the screen pretty well, there's some kind of hiccup in the call handling function though and it's not adding the call time of the call to the total call time of the client so it's not throwing an amount earned the way that it should. I'll have to figure out where the gap is if I want this to throw some good numbers my way. I have it set to one millisecond per minute so it is blasting through the day but kind of taking up a lot of memory and freezing up the browser. I wonder if I'm overreaching on some of this stuff. I have no idea how to optimize properly. I'll have to look up how to identify and patch memory leaks before I go much further with this process, but every time I add something lately it's starting to feel more and more like a proper game which is pretty awesome. I've got some ideas about how to handle client/operator acquisition. I think I'll have arrays for potentialClients and potentialEmployees and then have a screen where you can control advertising budget and then however much you're spending in advertising gives you a certain chance of getting operators/clients looking to sign up with every tick, and then it'll throw them into the arrays and you'll be able to peruse them and take them on/reject them at your leisure, though I think a timer would be good so they don't just stick around waiting for you forever. That timer is going to be in days, not minutes though so it has to wait for the days of the week framework to be adequately in place before I start taking care of that. Probably have that timer decrement in the endOfDay function though.

9/3/19

Good progress, set up a management tab and made it so you can switch between tabs and everything gets covered over by the end of day report when it happens and then you can reset it into another day. I got rid of the weird bug with the statline by using like a different target option for the event object. currentTarget instead of target, which means it goes off of the thing that the event handler (onclick property) triggered off of instead of the thing that was actually clicked. I replaced the random business name generator with one that can trigger different kinds of names and then put stuff before and after the name which is pretty good. I also want to do a list of like positive adjectives and have that be an option for some businesses. I could also for a couple templates add a randomization option to pick between a range of options for name type instead of just one option for name type, that could be a good time. It's good to set little goals for myself with this one because sometimes I don't have enough time to do much more than like add a couple names to the randomizer or fix the business name generator but I should try to get a bigger project done this weekend. I think I'll do the money stuff with advertising and the operator/client acquisition system that would be a good one to get in there.

I should have purchasable upgrades too, that's going to be an important one to add.

As I add more of these things that are really going to effect the "gaminess" of the system I'm putting together, I'll need to make sure I add some sort of save system to this sucker so that I can start to go through it like a campaign. I should also add a cheat code to bring me to a midgame state at some point too. Fast money or something, add that debug mode.

One of the upgrade paths can be to add different speeds to the system yeeeeah so you play near realtime at first and then get more into it.

I still kind of feel like a little interactive fiction could be added in here somewhere but I'm not sure where. Should manual call operations only be available when you're on a certain gamespeed? That would make an interactive fiction bit work a little better.


9/4/19

Put in a money variable and made it so completed calls add some moolah to the money variable which seems to be working well, it displays the same thing as the calculated money earned in the end of day report anyway, but there's some kind of weird disconnect happening if I answer a few calls manually and the money variable ends up being higher than the moneyEarned variable which I thought I fixed by making manually answered calls with a talkTime of zero increment the callTime stat in the client object by 1 but I guess it's not working right, I think it's not adding to the client correctly since the money variable is higher. I did a little display thing to show it as money too so that's good.

Fixed by just making answering the holding call increment the callTime by 1 instead of doing weird crap and now it matches up so good enough.


9/5/19

Alright so here's the plan to get client/operator stuff going. I want you to be able to spend money to take out ads in a menu in the management section, maybe just buttons for each kind of ad, maybe a drop down menu, not sure. And then you'll be able to decide how long the ad is going to go for and maybe have different options for where you want to take it out. The more expensive options make you more likely to get operators, obviously. There'll be a function in the core setTimer loop that ticks down and randomly decides whether or not it spawns a new operator/client for you in the necessary arrays and there also needs to be a render option that shows you the listings and it'll have a hire/accept button that you can click that moves the client/op object over to the necessary array in your main file info. I don't know which stats to display yet but it'll be all of them eventually. There'll also have to be a button to reject them and they should go away after awhile if you don't take them on. It's going to be free to hire people for now but at some point I'm going to put it in like a shift thing where they only work certain times and you'll have to pay them when they finish shifts. Not today though I don't think. I can add that to my todo list though. I'll need to include the pending hires/clients in the loop that checks whether or not the names are already taken. Maybe I'll move rejected ones into another array so that they don't show up again too. How many different initials are there potentially? I don't want to run out.

I should put a box in the status bar at the top that shows you if there are clients/operators waiting for review in the management tab, maybe it can display the amount of time left in your advertising campaigns too, or just flash a warning when one is near running out.

One idea I had was to make the game automatically speed up anytime that there aren't any calls coming in which should make it a little bit quicker to get through the day and make it so you don't have to slap that slowdown button when calls start displaying if you don't want to lose any.

Got the advertisement system working today, it's 7:30pm and I got to work on it a couple hours. You can pick from a range of advertisement options and then it spends the money on them, sets a timer going, and checks to see if it needs to give you a new operator or client every tick so that's good. I haven't started working with the actual hiring queue yet, that's gonna have to come later, maybe tonight maybe it'll have to wait, it was trickier than I thought. I realized I was using the call grabber for things timing out but the call grabber just pop()s objects instead of taking them specifically, I switched it around to look for the index of the call and then splice it out but I should use that elsewhere too especially in prep for having different level ops at some point. I should also put in a thing to generate the button objects at game startup based on which options are in the advertisement array in the database.


9/10/19

The human resources tab displays the people attracted by your advertisements and you can hire them and it adds them to the operator section in the call queue and they start taking calls and it keeps track of their stats. I split management into client management, human resources, and reports and I'm going to have it display all your operators and give you options for different things you can do with them, and the same thing for all the different clients. Cards are generated for each of your clients at program start up but I need to figure out how to get the types to display properly. I might want to go through and put all the types into like objects with the different names/messages/etc located in the objects but that would mean updating a lot of code which I want to do anyway. It would probably be better to do it now than later so I'll have to add that to my list.

Did a lot of scratch paper work at my job today thinking about how dispatching is going to work. I don't think it's going to be hard - there'll have to be a couple different places that calls can go, but since op.call is already an array it's just an extension of that at this point. I think I can just add some lines to the beginning of the callChecker function and have dispatch be something they do before they start grabbing calls if they're on dispatch. I also worked on coming up with ways to have operator stats actually effect their behavior but it's still pretty loose and I'm not sure how much of a thing I want it to be so I haven't started implementing it yet. I want to get the client advertising stuff working this weekend and let you take on new contracts and possible terminate old ones. While I'm at it, I probably want to make it so that you can fire operators and increase their levels. Working out paying ops is going to be a whole different thing. I think this is probably a good point to start doing a heavy review and reformulation of the basic layout of the code, getting all the stuff that belongs together together and making sure I have the file divisions I need. Baby steps.